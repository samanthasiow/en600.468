#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
from decimal import Decimal

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with Dice's coefficient...")
# Contains an array of all sentences in the text
# Each element is a 2-element array, [0] is the french translation of the sentence, and [1] is the english translation.
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

f_count = defaultdict(int)
e_total = defaultdict(int)
fe_count = defaultdict(int)

fe_alignments = {}
fe_weights = {}

for (n, (f, e)) in enumerate(bitext):
    # TODO: Remove punctuation?
    # TODO: Add 'null' option for english text

    print 'Calculating alignments...'
    for f_i in set(f):
        # count all instances of f_i
        if f_i not in f_count:
            f_count[f_i] = 1
        else:
            f_count[f_i] += 1

        # initialize t(e|f) uniformly
        for e_i in set(e):
            if (f_i, e_i) not in fe_alignments:
                j = len(e) + 1
                fe_alignments[f_i, e_i] = Decimal(1 / j)
            else:
                fe_alignments[f_i, e_i] += Decimal(1 / j)

    # print 'Counting translated word appearances...'
    # # count all e
    # for e_i in set(e):
    #     for fe_i, t in fe_alignments:
    #         if fe_i[1] == e_i:
    #             if e_i not in e_total:
    #                 e_total[e_i] = t
    #             else:
    #                 e_total[e_i] += t

print fe_alignments
#
# print 'Normalizing to e...'
# # fe_i is a tuple of (foreign, translated)
# for fe_i in fe_alignments:
#     print Decimal(fe_alignments[fe_i] / e_count[fe_i[1]])
#     fe_weights[fe_i] = Decimal(fe_alignments[fe_i] / e_count[fe_i[1]])

print fe_weights

  # for f_i in set(f):
  #   f_count[f_i] += 1
  #   for e_j in set(e):
  #     fe_count[(f_i,e_j)] += 1
  # for e_j in set(e):
  #   e_count[e_j] += 1
  # if n % 500 == 0:
  #   sys.stderr.write(".")

# dice = defaultdict(int)
# for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
#   dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
#   if k % 5000 == 0:
#     sys.stderr.write(".")
# sys.stderr.write("\n")
#
# for (f, e) in bitext:
#   for (i, f_i) in enumerate(f):
#     for (j, e_j) in enumerate(e):
#       if dice[(f_i,e_j)] >= opts.threshold:
#         sys.stdout.write("%i-%i " % (i,j))
#   sys.stdout.write("\n")
